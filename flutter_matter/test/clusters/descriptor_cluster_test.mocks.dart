// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_matter/test/clusters/descriptor_cluster_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_matter_platfrom_interface/src/cluster_interfaces/flutter_matter_descriptor_cluster_interface.dart'
    as _i2;
import 'package:flutter_matter_platfrom_interface/src/models/flutter_matter_descriptor_cluster_device_type_struct.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FlutterMatterDescriptorClusterInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterMatterDescriptorClusterInterface extends _i1.Mock
    implements _i2.FlutterMatterDescriptorClusterInterface {
  @override
  _i3.Future<List<_i4.FlutterMatterDescriptorClusterDeviceTypeStruct?>>
      readDeviceTypeList({
    required int? deviceId,
    required int? endpointId,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #readDeviceTypeList,
              [],
              {
                #deviceId: deviceId,
                #endpointId: endpointId,
              },
            ),
            returnValue: _i3.Future<
                    List<
                        _i4
                        .FlutterMatterDescriptorClusterDeviceTypeStruct?>>.value(
                <_i4.FlutterMatterDescriptorClusterDeviceTypeStruct?>[]),
            returnValueForMissingStub: _i3.Future<
                    List<
                        _i4
                        .FlutterMatterDescriptorClusterDeviceTypeStruct?>>.value(
                <_i4.FlutterMatterDescriptorClusterDeviceTypeStruct?>[]),
          ) as _i3.Future<
              List<_i4.FlutterMatterDescriptorClusterDeviceTypeStruct?>>);
  @override
  _i3.Future<List<int?>> readServerList({
    required int? deviceId,
    required int? endpointId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readServerList,
          [],
          {
            #deviceId: deviceId,
            #endpointId: endpointId,
          },
        ),
        returnValue: _i3.Future<List<int?>>.value(<int?>[]),
        returnValueForMissingStub: _i3.Future<List<int?>>.value(<int?>[]),
      ) as _i3.Future<List<int?>>);
  @override
  _i3.Future<List<int?>> readClientList({
    required int? deviceId,
    required int? endpointId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readClientList,
          [],
          {
            #deviceId: deviceId,
            #endpointId: endpointId,
          },
        ),
        returnValue: _i3.Future<List<int?>>.value(<int?>[]),
        returnValueForMissingStub: _i3.Future<List<int?>>.value(<int?>[]),
      ) as _i3.Future<List<int?>>);
  @override
  _i3.Future<List<int?>> readPartsList({
    required int? deviceId,
    required int? endpointId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readPartsList,
          [],
          {
            #deviceId: deviceId,
            #endpointId: endpointId,
          },
        ),
        returnValue: _i3.Future<List<int?>>.value(<int?>[]),
        returnValueForMissingStub: _i3.Future<List<int?>>.value(<int?>[]),
      ) as _i3.Future<List<int?>>);
}

/// A class which mocks [FlutterMatterDescriptorClusterDeviceTypeStruct].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterMatterDescriptorClusterDeviceTypeStruct extends _i1.Mock
    implements _i4.FlutterMatterDescriptorClusterDeviceTypeStruct {
  @override
  int get deviceType => (super.noSuchMethod(
        Invocation.getter(#deviceType),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get revision => (super.noSuchMethod(
        Invocation.getter(#revision),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
