// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class AndroidError {
  AndroidError({
    required this.code,
    this.message,
  });

  /// An error code.
  String code;

  /// A human-readable error message, possibly null.
  String? message;

  Object encode() {
    return <Object?>[
      code,
      message,
    ];
  }

  static AndroidError decode(Object result) {
    result as List<Object?>;
    return AndroidError(
      code: result[0]! as String,
      message: result[1] as String?,
    );
  }
}

class DescriptorClusterDeviceTypeStruct {
  DescriptorClusterDeviceTypeStruct({
    required this.deviceType,
    required this.revision,
  });

  int deviceType;

  int revision;

  Object encode() {
    return <Object?>[
      deviceType,
      revision,
    ];
  }

  static DescriptorClusterDeviceTypeStruct decode(Object result) {
    result as List<Object?>;
    return DescriptorClusterDeviceTypeStruct(
      deviceType: result[0]! as int,
      revision: result[1]! as int,
    );
  }
}

class MatterDevice {
  MatterDevice({
    required this.id,
  });

  int id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static MatterDevice decode(Object result) {
    result as List<Object?>;
    return MatterDevice(
      id: result[0]! as int,
    );
  }
}

class CommissionRequest {
  CommissionRequest({
    required this.id,
  });

  int id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static CommissionRequest decode(Object result) {
    result as List<Object?>;
    return CommissionRequest(
      id: result[0]! as int,
    );
  }
}

class OpenPairingWindowResult {
  OpenPairingWindowResult({
    this.manualPairingCode,
    this.qrCode,
  });

  String? manualPairingCode;

  String? qrCode;

  Object encode() {
    return <Object?>[
      manualPairingCode,
      qrCode,
    ];
  }

  static OpenPairingWindowResult decode(Object result) {
    result as List<Object?>;
    return OpenPairingWindowResult(
      manualPairingCode: result[0] as String?,
      qrCode: result[1] as String?,
    );
  }
}

class FlutterMatterHostOnOffClusterApi {
  /// Constructor for [FlutterMatterHostOnOffClusterApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterMatterHostOnOffClusterApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> off(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostOnOffClusterApi.off',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> on(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostOnOffClusterApi.on',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> toggle(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostOnOffClusterApi.toggle',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> readOnOff(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostOnOffClusterApi.readOnOff',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> subscribeToOnOff(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostOnOffClusterApi.subscribeToOnOff',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unsubscribeToOnOff(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostOnOffClusterApi.unsubscribeToOnOff',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterMatterFlutterOnOffClusterApiCodec extends StandardMessageCodec {
  const _FlutterMatterFlutterOnOffClusterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AndroidError) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AndroidError.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterMatterFlutterOnOffClusterApi {
  static const MessageCodec<Object?> codec =
      _FlutterMatterFlutterOnOffClusterApiCodec();

  void onOff(int deviceId, int endpointId, bool? onOff, AndroidError? error);

  static void setup(FlutterMatterFlutterOnOffClusterApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_matter_android.FlutterMatterFlutterOnOffClusterApi.onOff',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.flutter_matter_android.FlutterMatterFlutterOnOffClusterApi.onOff was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_deviceId = (args[0] as int?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.flutter_matter_android.FlutterMatterFlutterOnOffClusterApi.onOff was null, expected non-null int.');
          final int? arg_endpointId = (args[1] as int?);
          assert(arg_endpointId != null,
              'Argument for dev.flutter.pigeon.flutter_matter_android.FlutterMatterFlutterOnOffClusterApi.onOff was null, expected non-null int.');
          final bool? arg_onOff = (args[2] as bool?);
          final AndroidError? arg_error = (args[3] as AndroidError?);
          api.onOff(arg_deviceId!, arg_endpointId!, arg_onOff, arg_error);
          return;
        });
      }
    }
  }
}

class _FlutterMatterHostDescriptorClusterApiCodec extends StandardMessageCodec {
  const _FlutterMatterHostDescriptorClusterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DescriptorClusterDeviceTypeStruct) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return DescriptorClusterDeviceTypeStruct.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FlutterMatterHostDescriptorClusterApi {
  /// Constructor for [FlutterMatterHostDescriptorClusterApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterMatterHostDescriptorClusterApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec =
      _FlutterMatterHostDescriptorClusterApiCodec();

  Future<List<DescriptorClusterDeviceTypeStruct?>> readDeviceTypeList(
      int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostDescriptorClusterApi.readDeviceTypeList',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!
          .cast<DescriptorClusterDeviceTypeStruct?>();
    }
  }

  Future<List<int?>> readServerList(
      int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostDescriptorClusterApi.readServerList',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<int?>();
    }
  }

  Future<List<int?>> readClientList(
      int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostDescriptorClusterApi.readClientList',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<int?>();
    }
  }

  Future<List<int?>> readPartsList(int arg_deviceId, int arg_endpointId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostDescriptorClusterApi.readPartsList',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_deviceId, arg_endpointId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<int?>();
    }
  }
}

class _FlutterMatterHostApiCodec extends StandardMessageCodec {
  const _FlutterMatterHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CommissionRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MatterDevice) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is OpenPairingWindowResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return CommissionRequest.decode(readValue(buffer)!);
      case 129:
        return MatterDevice.decode(readValue(buffer)!);
      case 130:
        return OpenPairingWindowResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FlutterMatterHostApi {
  /// Constructor for [FlutterMatterHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterMatterHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FlutterMatterHostApiCodec();

  Future<String> getPlatformVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.getPlatformVersion',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<MatterDevice> commission(CommissionRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.commission',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MatterDevice?)!;
    }
  }

  Future<void> unpair(int arg_deviceId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.unpair',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OpenPairingWindowResult> openPairingWindowWithPin(int arg_deviceId,
      int arg_duration, int arg_discriminator, int arg_setupPin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.openPairingWindowWithPin',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(<Object?>[
      arg_deviceId,
      arg_duration,
      arg_discriminator,
      arg_setupPin
    ]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OpenPairingWindowResult?)!;
    }
  }
}
