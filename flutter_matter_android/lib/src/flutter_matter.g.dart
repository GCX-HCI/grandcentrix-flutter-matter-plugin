// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Commands for the different clusters, check the Matter Device Library Specification document
enum Command {
  /// Command for the on/off cluster
  off,

  /// Command for the on/off cluster
  on,

  /// Command for the on/off cluster
  toggle,
}

/// Attributes for the different clusters, check the Matter Device Library Specification document
enum Attribute {
  /// Attribute for the on/off cluster
  onOff,
}

/// Matter clusters, check the Matter Device Library Specification document
enum Cluster {
  /// Cluster ID 0x0006 for turning devices on and off.
  onOff,
}

class MatterDevice {
  MatterDevice({
    required this.id,
  });

  int id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static MatterDevice decode(Object result) {
    result as List<Object?>;
    return MatterDevice(
      id: result[0]! as int,
    );
  }
}

class CommissionRequest {
  CommissionRequest({
    required this.id,
  });

  int id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static CommissionRequest decode(Object result) {
    result as List<Object?>;
    return CommissionRequest(
      id: result[0]! as int,
    );
  }
}

class OpenPairingWindowResult {
  OpenPairingWindowResult({
    this.manualPairingCode,
    this.qrCode,
  });

  String? manualPairingCode;

  String? qrCode;

  Object encode() {
    return <Object?>[
      manualPairingCode,
      qrCode,
    ];
  }

  static OpenPairingWindowResult decode(Object result) {
    result as List<Object?>;
    return OpenPairingWindowResult(
      manualPairingCode: result[0] as String?,
      qrCode: result[1] as String?,
    );
  }
}

class _FlutterMatterHostApiCodec extends StandardMessageCodec {
  const _FlutterMatterHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CommissionRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MatterDevice) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is OpenPairingWindowResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return CommissionRequest.decode(readValue(buffer)!);
      case 129:
        return MatterDevice.decode(readValue(buffer)!);
      case 130:
        return OpenPairingWindowResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FlutterMatterHostApi {
  /// Constructor for [FlutterMatterHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterMatterHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FlutterMatterHostApiCodec();

  Future<String> getPlatformVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.getPlatformVersion',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<MatterDevice> commission(CommissionRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.commission',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MatterDevice?)!;
    }
  }

  Future<void> unpair(int arg_deviceId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.unpair',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OpenPairingWindowResult> openPairingWindowWithPin(int arg_deviceId,
      int arg_duration, int arg_discriminator, int arg_setupPin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.openPairingWindowWithPin',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(<Object?>[
      arg_deviceId,
      arg_duration,
      arg_discriminator,
      arg_setupPin
    ]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OpenPairingWindowResult?)!;
    }
  }

  Future<void> command(int arg_deviceId, int arg_endpointId,
      Cluster arg_cluster, Command arg_command) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.command',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(<Object?>[
      arg_deviceId,
      arg_endpointId,
      arg_cluster.index,
      arg_command.index
    ]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Object> attribute(int arg_deviceId, int arg_endpointId,
      Cluster arg_cluster, Attribute arg_attribute) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_matter_android.FlutterMatterHostApi.attribute',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(<Object?>[
      arg_deviceId,
      arg_endpointId,
      arg_cluster.index,
      arg_attribute.index
    ]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return replyList[0]!;
    }
  }
}
