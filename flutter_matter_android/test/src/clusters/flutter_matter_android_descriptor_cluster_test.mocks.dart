// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_matter_android/test/src/clusters/flutter_matter_android_descriptor_cluster_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_matter_android/src/flutter_matter.g.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FlutterMatterHostDescriptorClusterApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterMatterHostDescriptorClusterApi extends _i1.Mock
    implements _i2.FlutterMatterHostDescriptorClusterApi {
  @override
  _i3.Future<List<_i2.DescriptorClusterDeviceTypeStruct?>> readDeviceTypeList(
    int? arg_deviceId,
    int? arg_endpointId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDeviceTypeList,
          [
            arg_deviceId,
            arg_endpointId,
          ],
        ),
        returnValue:
            _i3.Future<List<_i2.DescriptorClusterDeviceTypeStruct?>>.value(
                <_i2.DescriptorClusterDeviceTypeStruct?>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.DescriptorClusterDeviceTypeStruct?>>.value(
                <_i2.DescriptorClusterDeviceTypeStruct?>[]),
      ) as _i3.Future<List<_i2.DescriptorClusterDeviceTypeStruct?>>);
  @override
  _i3.Future<List<int?>> readServerList(
    int? arg_deviceId,
    int? arg_endpointId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readServerList,
          [
            arg_deviceId,
            arg_endpointId,
          ],
        ),
        returnValue: _i3.Future<List<int?>>.value(<int?>[]),
        returnValueForMissingStub: _i3.Future<List<int?>>.value(<int?>[]),
      ) as _i3.Future<List<int?>>);
  @override
  _i3.Future<List<int?>> readClientList(
    int? arg_deviceId,
    int? arg_endpointId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readClientList,
          [
            arg_deviceId,
            arg_endpointId,
          ],
        ),
        returnValue: _i3.Future<List<int?>>.value(<int?>[]),
        returnValueForMissingStub: _i3.Future<List<int?>>.value(<int?>[]),
      ) as _i3.Future<List<int?>>);
  @override
  _i3.Future<List<int?>> readPartsList(
    int? arg_deviceId,
    int? arg_endpointId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readPartsList,
          [
            arg_deviceId,
            arg_endpointId,
          ],
        ),
        returnValue: _i3.Future<List<int?>>.value(<int?>[]),
        returnValueForMissingStub: _i3.Future<List<int?>>.value(<int?>[]),
      ) as _i3.Future<List<int?>>);
}
