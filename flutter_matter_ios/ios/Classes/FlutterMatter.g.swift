// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Commands for the different clusters, check the Matter Device Library Specification document
enum Command: Int {
  /// Command for the on/off cluster
  case off = 0
  /// Command for the on/off cluster
  case on = 1
  /// Command for the on/off cluster
  case toggle = 2
}

/// Attributes for the different clusters, check the Matter Device Library Specification document
enum Attribute: Int {
  /// Attribute for the on/off cluster
  case onOff = 0
}

/// Matter clusters, check the Matter Device Library Specification document
enum Cluster: Int {
  /// Cluster ID 0x0006 for turning devices on and off.
  case onOff = 0
}

/// Generated class from Pigeon that represents data sent in messages.
struct MatterDevice {
  var id: Int64

  static func fromList(_ list: [Any?]) -> MatterDevice? {
    let id = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)

    return MatterDevice(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CommissionRequest {
  var id: Int64

  static func fromList(_ list: [Any?]) -> CommissionRequest? {
    let id = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)

    return CommissionRequest(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OpenPairingWindowResult {
  var manualPairingCode: String? = nil
  var qrCode: String? = nil

  static func fromList(_ list: [Any?]) -> OpenPairingWindowResult? {
    let manualPairingCode: String? = nilOrValue(list[0])
    let qrCode: String? = nilOrValue(list[1])

    return OpenPairingWindowResult(
      manualPairingCode: manualPairingCode,
      qrCode: qrCode
    )
  }
  func toList() -> [Any?] {
    return [
      manualPairingCode,
      qrCode,
    ]
  }
}

private class FlutterMatterHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return CommissionRequest.fromList(self.readValue() as! [Any?])
      case 129:
        return MatterDevice.fromList(self.readValue() as! [Any?])
      case 130:
        return OpenPairingWindowResult.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FlutterMatterHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CommissionRequest {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? MatterDevice {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? OpenPairingWindowResult {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterMatterHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterMatterHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterMatterHostApiCodecWriter(data: data)
  }
}

class FlutterMatterHostApiCodec: FlutterStandardMessageCodec {
  static let shared = FlutterMatterHostApiCodec(readerWriter: FlutterMatterHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterMatterHostApi {
  func getPlatformVersion(completion: @escaping (Result<String, Error>) -> Void)
  func commission(request: CommissionRequest, completion: @escaping (Result<MatterDevice, Error>) -> Void)
  func unpair(deviceId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func openPairingWindowWithPin(deviceId: Int64, duration: Int64, discriminator: Int64, setupPin: Int64, completion: @escaping (Result<OpenPairingWindowResult, Error>) -> Void)
  func command(deviceId: Int64, endpointId: Int64, cluster: Cluster, command: Command, completion: @escaping (Result<Void, Error>) -> Void)
  func attribute(deviceId: Int64, endpointId: Int64, cluster: Cluster, attribute: Attribute, completion: @escaping (Result<Any, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterMatterHostApiSetup {
  /// The codec used by FlutterMatterHostApi.
  static var codec: FlutterStandardMessageCodec { FlutterMatterHostApiCodec.shared }
  /// Sets up an instance of `FlutterMatterHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterMatterHostApi?) {
    let getPlatformVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_matter_ios.FlutterMatterHostApi.getPlatformVersion", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPlatformVersionChannel.setMessageHandler { _, reply in
        api.getPlatformVersion() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getPlatformVersionChannel.setMessageHandler(nil)
    }
    let commissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_matter_ios.FlutterMatterHostApi.commission", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      commissionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! CommissionRequest
        api.commission(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      commissionChannel.setMessageHandler(nil)
    }
    let unpairChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_matter_ios.FlutterMatterHostApi.unpair", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unpairChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.unpair(deviceId: deviceIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      unpairChannel.setMessageHandler(nil)
    }
    let openPairingWindowWithPinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_matter_ios.FlutterMatterHostApi.openPairingWindowWithPin", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openPairingWindowWithPinChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let durationArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let discriminatorArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let setupPinArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        api.openPairingWindowWithPin(deviceId: deviceIdArg, duration: durationArg, discriminator: discriminatorArg, setupPin: setupPinArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openPairingWindowWithPinChannel.setMessageHandler(nil)
    }
    let commandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_matter_ios.FlutterMatterHostApi.command", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      commandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let endpointIdArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let clusterArg = Cluster(rawValue: args[2] as! Int)!
        let commandArg = Command(rawValue: args[3] as! Int)!
        api.command(deviceId: deviceIdArg, endpointId: endpointIdArg, cluster: clusterArg, command: commandArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      commandChannel.setMessageHandler(nil)
    }
    let attributeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_matter_ios.FlutterMatterHostApi.attribute", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      attributeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let endpointIdArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let clusterArg = Cluster(rawValue: args[2] as! Int)!
        let attributeArg = Attribute(rawValue: args[3] as! Int)!
        api.attribute(deviceId: deviceIdArg, endpointId: endpointIdArg, cluster: clusterArg, attribute: attributeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      attributeChannel.setMessageHandler(nil)
    }
  }
}
